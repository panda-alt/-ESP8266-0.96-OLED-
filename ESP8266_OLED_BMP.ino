#include <U8g2lib.h>


#define SCL D5
#define SDA D6
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /*reset=*/U8X8_PIN_NONE, /*clock=*/SCL, /*data=*/SDA); 

//取模得到的数组
//width:55,height:64
uint8_t ying[1024]={
  0,  0,  0,  0,  0, 96,226,255,207,255,191,255,  7,  0,  0,  0,\
  0,  0,  0,  0,  0, 48,241,255,247,255,255,255, 15,  0,  0,  0,\
  0,  0,  0,  0,  0,152,248,255,253,255,255,255, 31,  0,  0,  0,\
  0,  0,  0,  0,  0,136,252,255,254,255,255,255, 31,  0,  0,  0,\
  0,  0,  0,  0,  0,  4,254,127,255,255,255,255, 63,  0,  0,  0,\
  0,  0,  0,  0,  0,  4,254,191,255,255,255,255,127,  0,  0,  0,\
  0,  0,  0,  0,  0,  6,255,223,255,255,255,255,255,  0,  0,  0,\
  0,  0,  0,  0,  0,135,255,255,255,255,255,255,255,  0,  0,  0,\
  0,  0,  0,  0,  0,199,255,239,255,255,255,255,255,  1,  0,  0,\
  0,  0,  0,  0,  0,207,255,247,255,255,255,255,255,  3,  0,  0,\
  0,  0,  0,  0,128,207,254,255,255,255,255,255,255,  3,  0,  0,\
  0,  0,  0,  0,192,127,255,251,255,255,255,255,255,  7,  0,  0,\
  0,  0,  0,  0,192,207,254,253,255,255,255,255,255,  7,  0,  0,\
  0,  0,  0,  0,224,248,254,255,255,251,255,247,255,  7,  0,  0,\
  0,  0,  0,  0,112,248,255,254,255,251,255,247,255, 15,  0,  0,\
  0,  0,  0,  0,  0,248,207,255,255,249,255,247,255, 15,  0,  0,\
  0,  0,  0,  0,  8,125, 63,255,255,251,255,247,255, 15,  0,  0,\
  0,  0,  0,  0,136,185,255,254,255,255,255,247,255, 31,  0,  0,\
  0,  0,  0,  0,196,171,255,254,255,255,251,247,255, 31,  0,  0,\
  0,  0,  0,  0,196,151,191,255, 63,253,251,247,255, 31,  0,  0,\
  0,  0,  0,  0,230,159,239,255,191,253,251,255,231, 63,  0,  0,\
  0,  0,  0,  0,231,159,247,255,223,253,255,251,255, 63,  0,  0,\
  0,  0,  0,  0,227,255,221,255,255,253,255,251,255,127,  0,  0,\
  0,  0,  0,  0,  3,199,223,255,255,255,253,255,207,127,  0,  0,\
  0,  0,  0,  0,131,227,254,255,247,254,253,193,223,127,  0,  0,\
  0,  0,  0,  0,195,230,238,255,192,254,254,253,255,127,  0,  0,\
  0,  0,  0,  0,238,235,206,255,254,127,255,254,255,255,  0,  0,\
  0,  0,  0,  0,232,251,254, 31,127,159,255,254,254,255,  0,  0,\
  0,  0,  0,  0,224,251,243,167,191, 87,127,255,255,255,  0,  0,\
  0,  0,  0,  0,192,253,243,215,191,231,191,255,253,255,  1,  0,\
  0,  0,  0,  0,160,174,245,247,223, 57, 94,128,191,255,  1,  0,\
  0,  0,  0,  0, 96,159,247,202, 79,222,111,127,182,255,  1,  0,\
  0,  0,  0,  0, 96,255,125, 13,216,175,247,  0,143,127,  1,  0,\
  0,  0,  0,  0, 96,255,123,  2,224,123,125,  0,152,127,  1,  0,\
  0,  0,  0,  0, 96,251,187,  0,192, 23, 63, 32,184,127,  3,  0,\
  0,  0,  0,  0,224,251,195,  0,198,255, 31, 96,160,255,  3,  0,\
  0,  0,  0,  0,160,251, 51,  4,160,255, 95,  8,177,255,  1,  0,\
  0,  0,  0,  0,160,251, 59,164,246,255,127, 96,185,255,  1,  0,\
  0,  0,  0,  0,176,219,255, 48,246,255,127,243,189,191,  5,  0,\
  0,  0,  0,  0,144,219,255,255,247,255,127,191,223,191, 13,  0,\
  0,  0,  0,  0,144,243,255,239,251,255,255,254,223,207, 61,  0,\
  0,  0,  0,  0,152,191,247,223,253,255,255,105,223,223,103,  0,\
  0,  0,  0,  0,152,183,255,223,255,255,255,191,207,231,  3,  0,\
  0,  0,  0,  0,156,247,239,255,255,255,255,255,255,231,  3,  0,\
  0,  0,  0,  0, 70, 79,239,255,255,255,255,255,239,251,  4,  0,\
  0,  0,  0,  0, 64,239,223,255,255,255,255,255,247,224, 17,  0,\
  0,  0,  0,  0, 64,207,255,255,255,255,255,255,127,227, 55,  0,\
  0,  0,  0,  0,192,191,127,255,255,255,255,255,203,255, 66,  0,\
  0,  0,  0,  0,128, 63,246,254,255,255,255,255,235,119,192,  0,\
  0,  0,  0,  0,128,254,242,249,255,255,255,255,231,123, 32,  0,\
  0,  0,  0,  0,128,252,221,255,255,255,255,255,251, 31,  0,  0,\
  0,  0,  0,  0,128,255, 27,255,255,255,255,255,238, 87,  0,  0,\
  0,  0,  0,  0,  0,237,143,254,255,255,255,255,231,  7,  0,  0,\
  0,  0,  0,  0,  0,209,127,252,255,255,255,127,238,  7,  0,  1,\
  0,  0,  0,  0,  0,122,255,248,255,255,255,191,230,151,  0,  0,\
  0,  0,  0,  0,  0,238,131,244,255,255,255,223,238, 23,  0,  0,\
  0,  0,  0,  0,  0,228, 30,224,255,255,255, 31,227, 15,  0,  0,\
  0,  0,  0,  0,  0,228, 31,160,255,255,255, 11,231, 15,  2,  0,\
  0,  0,  0,  0,  0,232, 30,176,252,255,255,138,227, 11,  4,  0,\
  0,  0,  0,  0,  0,240, 30,  0,236,255,191,128,225, 47,  8,  0,\
  0,  0,  0,  0,  0,240, 30,  0,188,255, 71,192,224, 15,  8,  0,\
  0,  0,  0,  0,  0,240, 94,  0,254,251, 13,192,224, 29, 16,  0,\
  0,  0,  0,  0,  0,240, 31,  0,250,159, 15, 64,224, 29, 34,  0,\
  0,  0,  0,  0,  0,248, 63,  0,248,255, 31, 96,224, 29, 70,  0,\
};



void setup(void) {
  u8g2.begin();
  Serial.begin(921600);
}

void loop(void) {
  int i_bmp= 0;

  while(true){
    Serial.readBytes(ying, 1024);
    u8g2.clearBuffer();                          // 清空显示设备内部缓冲区
    u8g2.drawXBM( 0 , 0 , 128 , 64 , ying );     
    u8g2.sendBuffer();                           // 显示缓冲区内容
    i_bmp++;
    if(i_bmp>100){
      i_bmp= 0;
      while(Serial.read() >= 0){}                // 每隔100帧清空串口重新接收，以免数据丢失导致的画面异常持续积累
    }
  }
}
